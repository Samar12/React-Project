  constructor(props) {
    super(props);
    this.state = {
      input: {
        email: "",
        name: "",
        password: ""
      },
      error: {
        email: false,
        name: false,
        password: false
      }
    };
    this.validation = new SimpleSchema({
      name: {
        type: String,
        min: 3,
        max: 25,
        optional: false
      },
      email: {
        type: String,
        regEx: SimpleSchema.RegEx.Email,
        min: 5,
        max: 150,
        optional: false
      },
      password: {
        type: String,
        regEx: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*])(?=.{8,})/,
        min: 5,
        max: 150,
        optional: false
      }
    }).newContext();
    this.inputHandler = this.inputHandler.bind(this);
    this.onSubmit = this.onSubmit.bind(this);
    this.passRef = target => this.setState({ target });
  }
  inputHandler(event) {
    // debugger;
    this.validation.validate(
      //to validate all inputs each time
      { ...this.state.input, [event.target.name]: event.target.value }
    );
    //to reset the input validation state and capture and valid after invalid
    let temp = { name: false, email: false, password: false };
    this.validation.validationErrors().forEach(el => {
      temp[el.name] = true; //to capture any invalid values
    });
    this.setState({
      input: { ...this.state.input, [event.target.name]: event.target.value },
      error: { ...temp }
    });
  }
  onSubmit(e) {
    e.preventDefault();
    this.validation.validate({ ...this.state.input });
    if (this.validation.validationErrors().length == 0) {
    }
  }

 const { error, input } = this.state;


...............................................................................................................................
